// Code generated by goagen v1.2.0, DO NOT EDIT.
//
// API "Iroha-Gateway Server": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/soramitsu/iroha-gateway/design
// --out=$(GOPATH)/src/github.com/soramitsu/iroha-gateway
// --version=v1.2.0

package client

import (
	"github.com/goadesign/goa"
	"net/http"
)

// Account media type (default view)
//
// Identifier: application/vnd.account+json; view=default
type Account struct {
	// account
	Account *AccountPayload `form:"account" json:"account" xml:"account"`
	// response code
	Code int `form:"code" json:"code" xml:"code"`
	// response message
	Message string `form:"message" json:"message" xml:"message"`
}

// Validate validates the Account media type instance.
func (mt *Account) Validate() (err error) {
	if mt.Message == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "message"))
	}

	if mt.Account == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "account"))
	}
	if mt.Account != nil {
		if err2 := mt.Account.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeAccount decodes the Account instance encoded in resp body.
func (c *Client) DecodeAccount(resp *http.Response) (*Account, error) {
	var decoded Account
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Accounts media type (default view)
//
// Identifier: application/vnd.accounts+json; view=default
type Accounts struct {
	// accounts
	Accounts []*AccountPayload `form:"accounts" json:"accounts" xml:"accounts"`
	// response code
	Code int `form:"code" json:"code" xml:"code"`
	// response message
	Message string `form:"message" json:"message" xml:"message"`
}

// Validate validates the Accounts media type instance.
func (mt *Accounts) Validate() (err error) {
	if mt.Message == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "message"))
	}

	if mt.Accounts == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "accounts"))
	}
	for _, e := range mt.Accounts {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeAccounts decodes the Accounts instance encoded in resp body.
func (c *Client) DecodeAccounts(resp *http.Response) (*Accounts, error) {
	var decoded Accounts
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Currency media type (default view)
//
// Identifier: application/vnd.currency+json; view=default
type Currency struct {
	// response code
	Code     int                `form:"code" json:"code" xml:"code"`
	Currency []*CurrencyPayload `form:"currency" json:"currency" xml:"currency"`
	// response message
	Message string `form:"message" json:"message" xml:"message"`
}

// Validate validates the Currency media type instance.
func (mt *Currency) Validate() (err error) {
	if mt.Message == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "message"))
	}

	if mt.Currency == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "currency"))
	}
	for _, e := range mt.Currency {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeCurrency decodes the Currency instance encoded in resp body.
func (c *Client) DecodeCurrency(resp *http.Response) (*Currency, error) {
	var decoded Currency
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Basic response (default view)
//
// Identifier: application/vnd.message+json; view=default
type Message struct {
	// response code
	Code int `form:"code" json:"code" xml:"code"`
	// response message
	Message string `form:"message" json:"message" xml:"message"`
}

// Validate validates the Message media type instance.
func (mt *Message) Validate() (err error) {
	if mt.Message == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "message"))
	}

	return
}

// DecodeMessage decodes the Message instance encoded in resp body.
func (c *Client) DecodeMessage(resp *http.Response) (*Message, error) {
	var decoded Message
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Signatories media type (default view)
//
// Identifier: application/vnd.signatories+json; view=default
type Signatories struct {
	// response code
	Code int `form:"code" json:"code" xml:"code"`
	// response message
	Message     string   `form:"message" json:"message" xml:"message"`
	Signatories []string `form:"signatories" json:"signatories" xml:"signatories"`
}

// Validate validates the Signatories media type instance.
func (mt *Signatories) Validate() (err error) {
	if mt.Message == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "message"))
	}

	if mt.Signatories == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "signatories"))
	}
	return
}

// DecodeSignatories decodes the Signatories instance encoded in resp body.
func (c *Client) DecodeSignatories(resp *http.Response) (*Signatories, error) {
	var decoded Signatories
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Transactions media type (default view)
//
// Identifier: application/vnd.transactions+json; view=default
type Transactions struct {
	// response code
	Code int `form:"code" json:"code" xml:"code"`
	// response message
	Message      string         `form:"message" json:"message" xml:"message"`
	Transactions []*Transaction `form:"transactions" json:"transactions" xml:"transactions"`
}

// Validate validates the Transactions media type instance.
func (mt *Transactions) Validate() (err error) {
	if mt.Message == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "message"))
	}

	if mt.Transactions == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "transactions"))
	}
	for _, e := range mt.Transactions {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeTransactions decodes the Transactions instance encoded in resp body.
func (c *Client) DecodeTransactions(resp *http.Response) (*Transactions, error) {
	var decoded Transactions
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

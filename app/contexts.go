// Code generated by goagen v1.2.0, DO NOT EDIT.
//
// API "Iroha-Gateway Server": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/soramitsu/iroha-gateway/design
// --out=$(GOPATH)/src/github.com/soramitsu/iroha-gateway
// --version=v1.2.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// AddAccountContext provides the account add action context.
type AddAccountContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AddAccountRequest
}

// NewAddAccountContext parses the incoming request URL and body, performs validations and creates the
// context used by the account controller add action.
func NewAddAccountContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddAccountContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddAccountContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *AddAccountContext) Created(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddAccountContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AddAccountContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeleteByUUIDAccountContext provides the account deleteByUUID action context.
type DeleteByUUIDAccountContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UUID    string
	Payload *DeleteAccountRequest
}

// NewDeleteByUUIDAccountContext parses the incoming request URL and body, performs validations and creates the
// context used by the account controller deleteByUUID action.
func NewDeleteByUUIDAccountContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteByUUIDAccountContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteByUUIDAccountContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUUID := req.Params["uuid"]
	if len(paramUUID) > 0 {
		rawUUID := paramUUID[0]
		rctx.UUID = rawUUID
		if ok := goa.ValidatePattern(`^[0-9a-f-]{32}$`, rctx.UUID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`uuid`, rctx.UUID, `^[0-9a-f-]{32}$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteByUUIDAccountContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteByUUIDAccountContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteByUUIDAccountContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeleteByUsernameAccountContext provides the account deleteByUsername action context.
type DeleteByUsernameAccountContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	DomainURI string
	Username  string
	Payload   *DeleteAccountRequest
}

// NewDeleteByUsernameAccountContext parses the incoming request URL and body, performs validations and creates the
// context used by the account controller deleteByUsername action.
func NewDeleteByUsernameAccountContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteByUsernameAccountContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteByUsernameAccountContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDomainURI := req.Params["domain_uri"]
	if len(paramDomainURI) > 0 {
		rawDomainURI := paramDomainURI[0]
		rctx.DomainURI = rawDomainURI
		if ok := goa.ValidatePattern(`^(?:[0-9a-zA-Z-._~]|%[0-9][0-9])+$`, rctx.DomainURI); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`domain_uri`, rctx.DomainURI, `^(?:[0-9a-zA-Z-._~]|%[0-9][0-9])+$`))
		}
	}
	paramUsername := req.Params["username"]
	if len(paramUsername) > 0 {
		rawUsername := paramUsername[0]
		rctx.Username = rawUsername
		if ok := goa.ValidatePattern(`^[a-zA-Z0-9\_\-\.]{4,32}$`, rctx.Username); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`username`, rctx.Username, `^[a-zA-Z0-9\_\-\.]{4,32}$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteByUsernameAccountContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteByUsernameAccountContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteByUsernameAccountContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeleteByUsernameFromDefaultDomainAccountContext provides the account deleteByUsernameFromDefaultDomain action context.
type DeleteByUsernameFromDefaultDomainAccountContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Username string
	Payload  *DeleteAccountRequest
}

// NewDeleteByUsernameFromDefaultDomainAccountContext parses the incoming request URL and body, performs validations and creates the
// context used by the account controller deleteByUsernameFromDefaultDomain action.
func NewDeleteByUsernameFromDefaultDomainAccountContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteByUsernameFromDefaultDomainAccountContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteByUsernameFromDefaultDomainAccountContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUsername := req.Params["username"]
	if len(paramUsername) > 0 {
		rawUsername := paramUsername[0]
		rctx.Username = rawUsername
		if ok := goa.ValidatePattern(`^[a-zA-Z0-9\_\-\.]{4,32}$`, rctx.Username); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`username`, rctx.Username, `^[a-zA-Z0-9\_\-\.]{4,32}$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteByUsernameFromDefaultDomainAccountContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteByUsernameFromDefaultDomainAccountContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteByUsernameFromDefaultDomainAccountContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// GetAllAccountContext provides the account getAll action context.
type GetAllAccountContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewGetAllAccountContext parses the incoming request URL and body, performs validations and creates the
// context used by the account controller getAll action.
func NewGetAllAccountContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetAllAccountContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetAllAccountContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetAllAccountContext) OK(r *Accounts) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.accounts+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetAllAccountContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetAllAccountContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// GetByUUIDAccountContext provides the account getByUUID action context.
type GetByUUIDAccountContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IsCommitted *bool
	UUID        string
}

// NewGetByUUIDAccountContext parses the incoming request URL and body, performs validations and creates the
// context used by the account controller getByUUID action.
func NewGetByUUIDAccountContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetByUUIDAccountContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetByUUIDAccountContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramIsCommitted := req.Params["is_committed"]
	if len(paramIsCommitted) > 0 {
		rawIsCommitted := paramIsCommitted[0]
		if isCommitted, err2 := strconv.ParseBool(rawIsCommitted); err2 == nil {
			tmp1 := &isCommitted
			rctx.IsCommitted = tmp1
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("is_committed", rawIsCommitted, "boolean"))
		}
	}
	paramUUID := req.Params["uuid"]
	if len(paramUUID) > 0 {
		rawUUID := paramUUID[0]
		rctx.UUID = rawUUID
		if ok := goa.ValidatePattern(`^[0-9a-f-]{32}$`, rctx.UUID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`uuid`, rctx.UUID, `^[0-9a-f-]{32}$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetByUUIDAccountContext) OK(r *Account) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.account+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetByUUIDAccountContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetByUUIDAccountContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// GetByUsernameAccountContext provides the account getByUsername action context.
type GetByUsernameAccountContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	DomainURI   string
	IsCommitted *bool
	Username    string
}

// NewGetByUsernameAccountContext parses the incoming request URL and body, performs validations and creates the
// context used by the account controller getByUsername action.
func NewGetByUsernameAccountContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetByUsernameAccountContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetByUsernameAccountContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDomainURI := req.Params["domain_uri"]
	if len(paramDomainURI) > 0 {
		rawDomainURI := paramDomainURI[0]
		rctx.DomainURI = rawDomainURI
		if ok := goa.ValidatePattern(`^(?:[0-9a-zA-Z-._~]|%[0-9][0-9])+$`, rctx.DomainURI); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`domain_uri`, rctx.DomainURI, `^(?:[0-9a-zA-Z-._~]|%[0-9][0-9])+$`))
		}
	}
	paramIsCommitted := req.Params["is_committed"]
	if len(paramIsCommitted) > 0 {
		rawIsCommitted := paramIsCommitted[0]
		if isCommitted, err2 := strconv.ParseBool(rawIsCommitted); err2 == nil {
			tmp2 := &isCommitted
			rctx.IsCommitted = tmp2
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("is_committed", rawIsCommitted, "boolean"))
		}
	}
	paramUsername := req.Params["username"]
	if len(paramUsername) > 0 {
		rawUsername := paramUsername[0]
		rctx.Username = rawUsername
		if ok := goa.ValidatePattern(`^[a-zA-Z0-9\_\-\.]{4,32}$`, rctx.Username); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`username`, rctx.Username, `^[a-zA-Z0-9\_\-\.]{4,32}$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetByUsernameAccountContext) OK(r *Account) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.account+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetByUsernameAccountContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetByUsernameAccountContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// GetByUsernameFromDefaultDomainAccountContext provides the account getByUsernameFromDefaultDomain action context.
type GetByUsernameFromDefaultDomainAccountContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IsCommitted *bool
	Username    string
}

// NewGetByUsernameFromDefaultDomainAccountContext parses the incoming request URL and body, performs validations and creates the
// context used by the account controller getByUsernameFromDefaultDomain action.
func NewGetByUsernameFromDefaultDomainAccountContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetByUsernameFromDefaultDomainAccountContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetByUsernameFromDefaultDomainAccountContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramIsCommitted := req.Params["is_committed"]
	if len(paramIsCommitted) > 0 {
		rawIsCommitted := paramIsCommitted[0]
		if isCommitted, err2 := strconv.ParseBool(rawIsCommitted); err2 == nil {
			tmp3 := &isCommitted
			rctx.IsCommitted = tmp3
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("is_committed", rawIsCommitted, "boolean"))
		}
	}
	paramUsername := req.Params["username"]
	if len(paramUsername) > 0 {
		rawUsername := paramUsername[0]
		rctx.Username = rawUsername
		if ok := goa.ValidatePattern(`^[a-zA-Z0-9\_\-\.]{4,32}$`, rctx.Username); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`username`, rctx.Username, `^[a-zA-Z0-9\_\-\.]{4,32}$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetByUsernameFromDefaultDomainAccountContext) OK(r *Account) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.account+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetByUsernameFromDefaultDomainAccountContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetByUsernameFromDefaultDomainAccountContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateByUUIDAccountContext provides the account updateByUUID action context.
type UpdateByUUIDAccountContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UUID    string
	Payload *UpdateAccountRequest
}

// NewUpdateByUUIDAccountContext parses the incoming request URL and body, performs validations and creates the
// context used by the account controller updateByUUID action.
func NewUpdateByUUIDAccountContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateByUUIDAccountContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateByUUIDAccountContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUUID := req.Params["uuid"]
	if len(paramUUID) > 0 {
		rawUUID := paramUUID[0]
		rctx.UUID = rawUUID
		if ok := goa.ValidatePattern(`^[0-9a-f-]{32}$`, rctx.UUID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`uuid`, rctx.UUID, `^[0-9a-f-]{32}$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateByUUIDAccountContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateByUUIDAccountContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateByUUIDAccountContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateByUsernameAccountContext provides the account updateByUsername action context.
type UpdateByUsernameAccountContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	DomainURI string
	Username  string
	Payload   *UpdateAccountRequest
}

// NewUpdateByUsernameAccountContext parses the incoming request URL and body, performs validations and creates the
// context used by the account controller updateByUsername action.
func NewUpdateByUsernameAccountContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateByUsernameAccountContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateByUsernameAccountContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDomainURI := req.Params["domain_uri"]
	if len(paramDomainURI) > 0 {
		rawDomainURI := paramDomainURI[0]
		rctx.DomainURI = rawDomainURI
		if ok := goa.ValidatePattern(`^(?:[0-9a-zA-Z-._~]|%[0-9][0-9])+$`, rctx.DomainURI); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`domain_uri`, rctx.DomainURI, `^(?:[0-9a-zA-Z-._~]|%[0-9][0-9])+$`))
		}
	}
	paramUsername := req.Params["username"]
	if len(paramUsername) > 0 {
		rawUsername := paramUsername[0]
		rctx.Username = rawUsername
		if ok := goa.ValidatePattern(`^[a-zA-Z0-9\_\-\.]{4,32}$`, rctx.Username); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`username`, rctx.Username, `^[a-zA-Z0-9\_\-\.]{4,32}$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateByUsernameAccountContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateByUsernameAccountContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateByUsernameAccountContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateByUsernameFromDefaultDomainAccountContext provides the account updateByUsernameFromDefaultDomain action context.
type UpdateByUsernameFromDefaultDomainAccountContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Username string
	Payload  *UpdateAccountRequest
}

// NewUpdateByUsernameFromDefaultDomainAccountContext parses the incoming request URL and body, performs validations and creates the
// context used by the account controller updateByUsernameFromDefaultDomain action.
func NewUpdateByUsernameFromDefaultDomainAccountContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateByUsernameFromDefaultDomainAccountContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateByUsernameFromDefaultDomainAccountContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUsername := req.Params["username"]
	if len(paramUsername) > 0 {
		rawUsername := paramUsername[0]
		rctx.Username = rawUsername
		if ok := goa.ValidatePattern(`^[a-zA-Z0-9\_\-\.]{4,32}$`, rctx.Username); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`username`, rctx.Username, `^[a-zA-Z0-9\_\-\.]{4,32}$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateByUsernameFromDefaultDomainAccountContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateByUsernameFromDefaultDomainAccountContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateByUsernameFromDefaultDomainAccountContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// AddCurrencyContext provides the currency add action context.
type AddCurrencyContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateCurrencyRequest
}

// NewAddCurrencyContext parses the incoming request URL and body, performs validations and creates the
// context used by the currency controller add action.
func NewAddCurrencyContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddCurrencyContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddCurrencyContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *AddCurrencyContext) Created(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddCurrencyContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AddCurrencyContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// AddValueCurrencyContext provides the currency addValue action context.
type AddValueCurrencyContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CurrencyURI string
	Payload     *CurrencyValueRequest
}

// NewAddValueCurrencyContext parses the incoming request URL and body, performs validations and creates the
// context used by the currency controller addValue action.
func NewAddValueCurrencyContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddValueCurrencyContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddValueCurrencyContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCurrencyURI := req.Params["currency_uri"]
	if len(paramCurrencyURI) > 0 {
		rawCurrencyURI := paramCurrencyURI[0]
		rctx.CurrencyURI = rawCurrencyURI
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddValueCurrencyContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddValueCurrencyContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AddValueCurrencyContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeleteCurrencyContext provides the currency delete action context.
type DeleteCurrencyContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CurrencyURI string
	Payload     *DeleteCurrencyRequest
}

// NewDeleteCurrencyContext parses the incoming request URL and body, performs validations and creates the
// context used by the currency controller delete action.
func NewDeleteCurrencyContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteCurrencyContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteCurrencyContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCurrencyURI := req.Params["currency_uri"]
	if len(paramCurrencyURI) > 0 {
		rawCurrencyURI := paramCurrencyURI[0]
		rctx.CurrencyURI = rawCurrencyURI
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteCurrencyContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteCurrencyContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteCurrencyContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// GetAllCurrencyContext provides the currency getAll action context.
type GetAllCurrencyContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CreatorPubkey string
	CurrencyURI   string
	IsCommitted   *bool
	Target        string
}

// NewGetAllCurrencyContext parses the incoming request URL and body, performs validations and creates the
// context used by the currency controller getAll action.
func NewGetAllCurrencyContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetAllCurrencyContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetAllCurrencyContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCreatorPubkey := req.Params["creator_pubkey"]
	if len(paramCreatorPubkey) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("creator_pubkey"))
	} else {
		rawCreatorPubkey := paramCreatorPubkey[0]
		rctx.CreatorPubkey = rawCreatorPubkey
	}
	paramCurrencyURI := req.Params["currency_uri"]
	if len(paramCurrencyURI) > 0 {
		rawCurrencyURI := paramCurrencyURI[0]
		rctx.CurrencyURI = rawCurrencyURI
	}
	paramIsCommitted := req.Params["is_committed"]
	if len(paramIsCommitted) > 0 {
		rawIsCommitted := paramIsCommitted[0]
		if isCommitted, err2 := strconv.ParseBool(rawIsCommitted); err2 == nil {
			tmp4 := &isCommitted
			rctx.IsCommitted = tmp4
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("is_committed", rawIsCommitted, "boolean"))
		}
	}
	paramTarget := req.Params["target"]
	if len(paramTarget) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("target"))
	} else {
		rawTarget := paramTarget[0]
		rctx.Target = rawTarget
		if ok := goa.ValidatePattern(`[0-9a-zA-Z-_.~]+`, rctx.Target); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`target`, rctx.Target, `[0-9a-zA-Z-_.~]+`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetAllCurrencyContext) OK(r *Currency) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.currency+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetAllCurrencyContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetAllCurrencyContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// SubtractValueCurrencyContext provides the currency subtractValue action context.
type SubtractValueCurrencyContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CurrencyURI string
	Payload     *CurrencyValueRequest
}

// NewSubtractValueCurrencyContext parses the incoming request URL and body, performs validations and creates the
// context used by the currency controller subtractValue action.
func NewSubtractValueCurrencyContext(ctx context.Context, r *http.Request, service *goa.Service) (*SubtractValueCurrencyContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SubtractValueCurrencyContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCurrencyURI := req.Params["currency_uri"]
	if len(paramCurrencyURI) > 0 {
		rawCurrencyURI := paramCurrencyURI[0]
		rctx.CurrencyURI = rawCurrencyURI
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SubtractValueCurrencyContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SubtractValueCurrencyContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SubtractValueCurrencyContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// TransferCurrencyContext provides the currency transfer action context.
type TransferCurrencyContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CurrencyURI string
	Payload     *CurrencyTransferRequest
}

// NewTransferCurrencyContext parses the incoming request URL and body, performs validations and creates the
// context used by the currency controller transfer action.
func NewTransferCurrencyContext(ctx context.Context, r *http.Request, service *goa.Service) (*TransferCurrencyContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := TransferCurrencyContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCurrencyURI := req.Params["currency_uri"]
	if len(paramCurrencyURI) > 0 {
		rawCurrencyURI := paramCurrencyURI[0]
		rctx.CurrencyURI = rawCurrencyURI
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *TransferCurrencyContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *TransferCurrencyContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *TransferCurrencyContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateCurrencyContext provides the currency update action context.
type UpdateCurrencyContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CurrencyURI string
	Payload     *UpdateCurrencyRequest
}

// NewUpdateCurrencyContext parses the incoming request URL and body, performs validations and creates the
// context used by the currency controller update action.
func NewUpdateCurrencyContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateCurrencyContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateCurrencyContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCurrencyURI := req.Params["currency_uri"]
	if len(paramCurrencyURI) > 0 {
		rawCurrencyURI := paramCurrencyURI[0]
		rctx.CurrencyURI = rawCurrencyURI
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateCurrencyContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateCurrencyContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateCurrencyContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateQuorumContext provides the quorum update action context.
type UpdateQuorumContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UUID    string
	Payload *UpdateQuorumRequest
}

// NewUpdateQuorumContext parses the incoming request URL and body, performs validations and creates the
// context used by the quorum controller update action.
func NewUpdateQuorumContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateQuorumContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateQuorumContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUUID := req.Params["uuid"]
	if len(paramUUID) > 0 {
		rawUUID := paramUUID[0]
		rctx.UUID = rawUUID
		if ok := goa.ValidatePattern(`^[0-9a-f-]{32}$`, rctx.UUID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`uuid`, rctx.UUID, `^[0-9a-f-]{32}$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateQuorumContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateQuorumContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateQuorumContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// AddSignatoriesContext provides the signatories add action context.
type AddSignatoriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UUID    string
	Payload *SignatoryRequest
}

// NewAddSignatoriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the signatories controller add action.
func NewAddSignatoriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddSignatoriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddSignatoriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUUID := req.Params["uuid"]
	if len(paramUUID) > 0 {
		rawUUID := paramUUID[0]
		rctx.UUID = rawUUID
		if ok := goa.ValidatePattern(`^[0-9a-f-]{32}$`, rctx.UUID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`uuid`, rctx.UUID, `^[0-9a-f-]{32}$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddSignatoriesContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddSignatoriesContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AddSignatoriesContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeleteSignatoriesContext provides the signatories delete action context.
type DeleteSignatoriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Sig     string
	UUID    string
	Payload *DeleteSignatoryRequest
}

// NewDeleteSignatoriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the signatories controller delete action.
func NewDeleteSignatoriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteSignatoriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteSignatoriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSig := req.Params["sig"]
	if len(paramSig) > 0 {
		rawSig := paramSig[0]
		rctx.Sig = rawSig
		if ok := goa.ValidatePattern(`^[0-9a-zA-Z-_.~]+$`, rctx.Sig); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`sig`, rctx.Sig, `^[0-9a-zA-Z-_.~]+$`))
		}
	}
	paramUUID := req.Params["uuid"]
	if len(paramUUID) > 0 {
		rawUUID := paramUUID[0]
		rctx.UUID = rawUUID
		if ok := goa.ValidatePattern(`^[0-9a-f-]{32}$`, rctx.UUID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`uuid`, rctx.UUID, `^[0-9a-f-]{32}$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteSignatoriesContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteSignatoriesContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteSignatoriesContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// GetAllSignatoriesContext provides the signatories getAll action context.
type GetAllSignatoriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CreatorPubkey *string
	IsCommitted   *bool
	UUID          string
}

// NewGetAllSignatoriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the signatories controller getAll action.
func NewGetAllSignatoriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetAllSignatoriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetAllSignatoriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCreatorPubkey := req.Params["creator_pubkey"]
	if len(paramCreatorPubkey) > 0 {
		rawCreatorPubkey := paramCreatorPubkey[0]
		rctx.CreatorPubkey = &rawCreatorPubkey
		if rctx.CreatorPubkey != nil {
			if ok := goa.ValidatePattern(`^[0-9a-zA-Z-_.~]+$`, *rctx.CreatorPubkey); !ok {
				err = goa.MergeErrors(err, goa.InvalidPatternError(`creator_pubkey`, *rctx.CreatorPubkey, `^[0-9a-zA-Z-_.~]+$`))
			}
		}
	}
	paramIsCommitted := req.Params["is_committed"]
	if len(paramIsCommitted) > 0 {
		rawIsCommitted := paramIsCommitted[0]
		if isCommitted, err2 := strconv.ParseBool(rawIsCommitted); err2 == nil {
			tmp5 := &isCommitted
			rctx.IsCommitted = tmp5
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("is_committed", rawIsCommitted, "boolean"))
		}
	}
	paramUUID := req.Params["uuid"]
	if len(paramUUID) > 0 {
		rawUUID := paramUUID[0]
		rctx.UUID = rawUUID
		if ok := goa.ValidatePattern(`^[0-9a-f-]{32}$`, rctx.UUID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`uuid`, rctx.UUID, `^[0-9a-f-]{32}$`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetAllSignatoriesContext) OK(r *Signatories) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.signatories+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetAllSignatoriesContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetAllSignatoriesContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// GetAllTransactionsContext provides the transactions getAll action context.
type GetAllTransactionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CreatorPubkey string
	CurrencyURI   string
	IsCommitted   *bool
	Target        string
}

// NewGetAllTransactionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the transactions controller getAll action.
func NewGetAllTransactionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetAllTransactionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetAllTransactionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCreatorPubkey := req.Params["creator_pubkey"]
	if len(paramCreatorPubkey) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("creator_pubkey"))
	} else {
		rawCreatorPubkey := paramCreatorPubkey[0]
		rctx.CreatorPubkey = rawCreatorPubkey
	}
	paramCurrencyURI := req.Params["currency_uri"]
	if len(paramCurrencyURI) > 0 {
		rawCurrencyURI := paramCurrencyURI[0]
		rctx.CurrencyURI = rawCurrencyURI
	}
	paramIsCommitted := req.Params["is_committed"]
	if len(paramIsCommitted) > 0 {
		rawIsCommitted := paramIsCommitted[0]
		if isCommitted, err2 := strconv.ParseBool(rawIsCommitted); err2 == nil {
			tmp6 := &isCommitted
			rctx.IsCommitted = tmp6
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("is_committed", rawIsCommitted, "boolean"))
		}
	}
	paramTarget := req.Params["target"]
	if len(paramTarget) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("target"))
	} else {
		rawTarget := paramTarget[0]
		rctx.Target = rawTarget
		if ok := goa.ValidatePattern(`[0-9a-zA-Z-_.~]+`, rctx.Target); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`target`, rctx.Target, `[0-9a-zA-Z-_.~]+`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetAllTransactionsContext) OK(r *Transactions) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.transactions+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetAllTransactionsContext) BadRequest(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetAllTransactionsContext) InternalServerError(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

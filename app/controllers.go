// Code generated by goagen v1.2.0, DO NOT EDIT.
//
// API "Iroha-Gateway Server": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/soramitsu/iroha-gateway/design
// --out=$(GOPATH)/src/github.com/soramitsu/iroha-gateway
// --version=v1.2.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// AccountController is the controller interface for the Account actions.
type AccountController interface {
	goa.Muxer
	Add(*AddAccountContext) error
	DeleteByUUID(*DeleteByUUIDAccountContext) error
	DeleteByUsername(*DeleteByUsernameAccountContext) error
	DeleteByUsernameFromDefaultDomain(*DeleteByUsernameFromDefaultDomainAccountContext) error
	GetAll(*GetAllAccountContext) error
	GetByUUID(*GetByUUIDAccountContext) error
	GetByUsername(*GetByUsernameAccountContext) error
	GetByUsernameFromDefaultDomain(*GetByUsernameFromDefaultDomainAccountContext) error
	UpdateByUUID(*UpdateByUUIDAccountContext) error
	UpdateByUsername(*UpdateByUsernameAccountContext) error
	UpdateByUsernameFromDefaultDomain(*UpdateByUsernameFromDefaultDomainAccountContext) error
}

// MountAccountController "mounts" a Account resource controller on the given service.
func MountAccountController(service *goa.Service, ctrl AccountController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddAccountContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddAccountRequest)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add(rctx)
	}
	service.Mux.Handle("POST", "/accounts", ctrl.MuxHandler("Add", h, unmarshalAddAccountPayload))
	service.LogInfo("mount", "ctrl", "Account", "action", "Add", "route", "POST /accounts")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteByUUIDAccountContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*DeleteAccountRequest)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.DeleteByUUID(rctx)
	}
	service.Mux.Handle("DELETE", "/accounts/:uuid", ctrl.MuxHandler("DeleteByUUID", h, unmarshalDeleteByUUIDAccountPayload))
	service.LogInfo("mount", "ctrl", "Account", "action", "DeleteByUUID", "route", "DELETE /accounts/:uuid")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteByUsernameAccountContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*DeleteAccountRequest)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.DeleteByUsername(rctx)
	}
	service.Mux.Handle("DELETE", "/domains/:domain_uri/accounts/:username", ctrl.MuxHandler("DeleteByUsername", h, unmarshalDeleteByUsernameAccountPayload))
	service.LogInfo("mount", "ctrl", "Account", "action", "DeleteByUsername", "route", "DELETE /domains/:domain_uri/accounts/:username")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteByUsernameFromDefaultDomainAccountContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*DeleteAccountRequest)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.DeleteByUsernameFromDefaultDomain(rctx)
	}
	service.Mux.Handle("DELETE", "/domains/default/accounts/:username", ctrl.MuxHandler("DeleteByUsernameFromDefaultDomain", h, unmarshalDeleteByUsernameFromDefaultDomainAccountPayload))
	service.LogInfo("mount", "ctrl", "Account", "action", "DeleteByUsernameFromDefaultDomain", "route", "DELETE /domains/default/accounts/:username")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetAllAccountContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetAll(rctx)
	}
	service.Mux.Handle("GET", "/accounts", ctrl.MuxHandler("GetAll", h, nil))
	service.LogInfo("mount", "ctrl", "Account", "action", "GetAll", "route", "GET /accounts")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetByUUIDAccountContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetByUUID(rctx)
	}
	service.Mux.Handle("GET", "/accounts/:uuid", ctrl.MuxHandler("GetByUUID", h, nil))
	service.LogInfo("mount", "ctrl", "Account", "action", "GetByUUID", "route", "GET /accounts/:uuid")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetByUsernameAccountContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetByUsername(rctx)
	}
	service.Mux.Handle("GET", "/domains/:domain_uri/accounts/:username", ctrl.MuxHandler("GetByUsername", h, nil))
	service.LogInfo("mount", "ctrl", "Account", "action", "GetByUsername", "route", "GET /domains/:domain_uri/accounts/:username")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetByUsernameFromDefaultDomainAccountContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetByUsernameFromDefaultDomain(rctx)
	}
	service.Mux.Handle("GET", "/domains/default/accounts/:username", ctrl.MuxHandler("GetByUsernameFromDefaultDomain", h, nil))
	service.LogInfo("mount", "ctrl", "Account", "action", "GetByUsernameFromDefaultDomain", "route", "GET /domains/default/accounts/:username")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateByUUIDAccountContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateAccountRequest)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.UpdateByUUID(rctx)
	}
	service.Mux.Handle("PUT", "/accounts/:uuid", ctrl.MuxHandler("UpdateByUUID", h, unmarshalUpdateByUUIDAccountPayload))
	service.LogInfo("mount", "ctrl", "Account", "action", "UpdateByUUID", "route", "PUT /accounts/:uuid")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateByUsernameAccountContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateAccountRequest)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.UpdateByUsername(rctx)
	}
	service.Mux.Handle("PUT", "/domains/:domain_uri/accounts/:username", ctrl.MuxHandler("UpdateByUsername", h, unmarshalUpdateByUsernameAccountPayload))
	service.LogInfo("mount", "ctrl", "Account", "action", "UpdateByUsername", "route", "PUT /domains/:domain_uri/accounts/:username")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateByUsernameFromDefaultDomainAccountContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateAccountRequest)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.UpdateByUsernameFromDefaultDomain(rctx)
	}
	service.Mux.Handle("PUT", "/domains/default/accounts/:username", ctrl.MuxHandler("UpdateByUsernameFromDefaultDomain", h, unmarshalUpdateByUsernameFromDefaultDomainAccountPayload))
	service.LogInfo("mount", "ctrl", "Account", "action", "UpdateByUsernameFromDefaultDomain", "route", "PUT /domains/default/accounts/:username")
}

// unmarshalAddAccountPayload unmarshals the request body into the context request data Payload field.
func unmarshalAddAccountPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addAccountRequest{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalDeleteByUUIDAccountPayload unmarshals the request body into the context request data Payload field.
func unmarshalDeleteByUUIDAccountPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &deleteAccountRequest{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalDeleteByUsernameAccountPayload unmarshals the request body into the context request data Payload field.
func unmarshalDeleteByUsernameAccountPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &deleteAccountRequest{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalDeleteByUsernameFromDefaultDomainAccountPayload unmarshals the request body into the context request data Payload field.
func unmarshalDeleteByUsernameFromDefaultDomainAccountPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &deleteAccountRequest{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateByUUIDAccountPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateByUUIDAccountPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateAccountRequest{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateByUsernameAccountPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateByUsernameAccountPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateAccountRequest{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateByUsernameFromDefaultDomainAccountPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateByUsernameFromDefaultDomainAccountPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateAccountRequest{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// CurrencyController is the controller interface for the Currency actions.
type CurrencyController interface {
	goa.Muxer
	Add(*AddCurrencyContext) error
	AddValue(*AddValueCurrencyContext) error
	Delete(*DeleteCurrencyContext) error
	GetAll(*GetAllCurrencyContext) error
	SubtractValue(*SubtractValueCurrencyContext) error
	Transfer(*TransferCurrencyContext) error
	Update(*UpdateCurrencyContext) error
}

// MountCurrencyController "mounts" a Currency resource controller on the given service.
func MountCurrencyController(service *goa.Service, ctrl CurrencyController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddCurrencyContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateCurrencyRequest)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add(rctx)
	}
	service.Mux.Handle("POST", "/currency", ctrl.MuxHandler("Add", h, unmarshalAddCurrencyPayload))
	service.LogInfo("mount", "ctrl", "Currency", "action", "Add", "route", "POST /currency")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddValueCurrencyContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CurrencyValueRequest)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.AddValue(rctx)
	}
	service.Mux.Handle("POST", "/currency/:currency_uri/add", ctrl.MuxHandler("AddValue", h, unmarshalAddValueCurrencyPayload))
	service.LogInfo("mount", "ctrl", "Currency", "action", "AddValue", "route", "POST /currency/:currency_uri/add")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteCurrencyContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*DeleteCurrencyRequest)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Delete(rctx)
	}
	service.Mux.Handle("DELETE", "/currency/:currency_uri", ctrl.MuxHandler("Delete", h, unmarshalDeleteCurrencyPayload))
	service.LogInfo("mount", "ctrl", "Currency", "action", "Delete", "route", "DELETE /currency/:currency_uri")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetAllCurrencyContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetAll(rctx)
	}
	service.Mux.Handle("GET", "/currency/:currency_uri", ctrl.MuxHandler("GetAll", h, nil))
	service.LogInfo("mount", "ctrl", "Currency", "action", "GetAll", "route", "GET /currency/:currency_uri")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSubtractValueCurrencyContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CurrencyValueRequest)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.SubtractValue(rctx)
	}
	service.Mux.Handle("POST", "/currency/:currency_uri/subtract", ctrl.MuxHandler("SubtractValue", h, unmarshalSubtractValueCurrencyPayload))
	service.LogInfo("mount", "ctrl", "Currency", "action", "SubtractValue", "route", "POST /currency/:currency_uri/subtract")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewTransferCurrencyContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CurrencyTransferRequest)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Transfer(rctx)
	}
	service.Mux.Handle("POST", "/currency/:currency_uri/transfer", ctrl.MuxHandler("Transfer", h, unmarshalTransferCurrencyPayload))
	service.LogInfo("mount", "ctrl", "Currency", "action", "Transfer", "route", "POST /currency/:currency_uri/transfer")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateCurrencyContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateCurrencyRequest)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	service.Mux.Handle("PUT", "/currency/:currency_uri", ctrl.MuxHandler("Update", h, unmarshalUpdateCurrencyPayload))
	service.LogInfo("mount", "ctrl", "Currency", "action", "Update", "route", "PUT /currency/:currency_uri")
}

// unmarshalAddCurrencyPayload unmarshals the request body into the context request data Payload field.
func unmarshalAddCurrencyPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createCurrencyRequest{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalAddValueCurrencyPayload unmarshals the request body into the context request data Payload field.
func unmarshalAddValueCurrencyPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &currencyValueRequest{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalDeleteCurrencyPayload unmarshals the request body into the context request data Payload field.
func unmarshalDeleteCurrencyPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &deleteCurrencyRequest{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalSubtractValueCurrencyPayload unmarshals the request body into the context request data Payload field.
func unmarshalSubtractValueCurrencyPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &currencyValueRequest{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalTransferCurrencyPayload unmarshals the request body into the context request data Payload field.
func unmarshalTransferCurrencyPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &currencyTransferRequest{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateCurrencyPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateCurrencyPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateCurrencyRequest{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// QuorumController is the controller interface for the Quorum actions.
type QuorumController interface {
	goa.Muxer
	Update(*UpdateQuorumContext) error
}

// MountQuorumController "mounts" a Quorum resource controller on the given service.
func MountQuorumController(service *goa.Service, ctrl QuorumController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateQuorumContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateQuorumRequest)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	service.Mux.Handle("PUT", "/accounts/:uuid/quorum", ctrl.MuxHandler("Update", h, unmarshalUpdateQuorumPayload))
	service.LogInfo("mount", "ctrl", "Quorum", "action", "Update", "route", "PUT /accounts/:uuid/quorum")
}

// unmarshalUpdateQuorumPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateQuorumPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateQuorumRequest{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// SignatoriesController is the controller interface for the Signatories actions.
type SignatoriesController interface {
	goa.Muxer
	Add(*AddSignatoriesContext) error
	Delete(*DeleteSignatoriesContext) error
	GetAll(*GetAllSignatoriesContext) error
}

// MountSignatoriesController "mounts" a Signatories resource controller on the given service.
func MountSignatoriesController(service *goa.Service, ctrl SignatoriesController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddSignatoriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*SignatoryRequest)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add(rctx)
	}
	service.Mux.Handle("POST", "/accounts/:uuid/signatories", ctrl.MuxHandler("Add", h, unmarshalAddSignatoriesPayload))
	service.LogInfo("mount", "ctrl", "Signatories", "action", "Add", "route", "POST /accounts/:uuid/signatories")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteSignatoriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*DeleteSignatoryRequest)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Delete(rctx)
	}
	service.Mux.Handle("DELETE", "/accounts/:uuid/signatories/:sig", ctrl.MuxHandler("Delete", h, unmarshalDeleteSignatoriesPayload))
	service.LogInfo("mount", "ctrl", "Signatories", "action", "Delete", "route", "DELETE /accounts/:uuid/signatories/:sig")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetAllSignatoriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetAll(rctx)
	}
	service.Mux.Handle("GET", "/accounts/:uuid/signatories", ctrl.MuxHandler("GetAll", h, nil))
	service.LogInfo("mount", "ctrl", "Signatories", "action", "GetAll", "route", "GET /accounts/:uuid/signatories")
}

// unmarshalAddSignatoriesPayload unmarshals the request body into the context request data Payload field.
func unmarshalAddSignatoriesPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &signatoryRequest{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalDeleteSignatoriesPayload unmarshals the request body into the context request data Payload field.
func unmarshalDeleteSignatoriesPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &deleteSignatoryRequest{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// TransactionsController is the controller interface for the Transactions actions.
type TransactionsController interface {
	goa.Muxer
	GetAll(*GetAllTransactionsContext) error
}

// MountTransactionsController "mounts" a Transactions resource controller on the given service.
func MountTransactionsController(service *goa.Service, ctrl TransactionsController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetAllTransactionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetAll(rctx)
	}
	service.Mux.Handle("GET", "/transactions/:currency_uri", ctrl.MuxHandler("GetAll", h, nil))
	service.LogInfo("mount", "ctrl", "Transactions", "action", "GetAll", "route", "GET /transactions/:currency_uri")
}
